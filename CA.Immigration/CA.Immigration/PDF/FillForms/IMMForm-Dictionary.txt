			// Finally figured out how to fill IMM forms with dictionary
			
			string[] p = new string[] { "jacky", "47" };
            Dictionary<string, string> IMM5257 = new Dictionary<string, string>() {

                ["form1.personaldetails.familyName"] = p[0],
                ["form1.personaldetails.age"] = p[1]
            };

            foreach(KeyValuePair<string,string> kvp in IMM5257) {
                Console.WriteLine($"{kvp.Key}'s value is {kvp.Value.ToString()}");

            }

			// a example of filling xfa form
			using System.Collections.Generic;
using System.Linq;
using Aspose.Pdf;
using System.IO;

namespace Aspose
{
    class Program
    {
        static void Main(string[] args)
        {
            // writePdf1();
            writePDF2();
        }
// This method used to fill form based on a template and create a new pdf file. But it will break the reader enable right
        private static void fillPDF1()
        {
            // Load XFA form
            Document doc = new Document("c:/vba/imm5709.pdf");
            // Get names of XFA form fields
            string[] names = doc.Form.XFA.FieldNames;
            // Set field values
            doc.Form.XFA[@"form1.Page1.PersonalDetails.Name.FamilyName"] = "Field 0";
            doc.Form.XFA[@"form1.Page1.PersonalDetails.Name.GivenName"] = "Field 1";
            doc.Form.XFA[@"form1.Page1.PersonalDetails.ServiceIn.UCIClientID"] = "12345678";
            doc.Form.XFA["form1.Page1.PersonalDetails.ApplyingFor.TRP"] = "1";
            doc.Form.XFA["form1.Page1.PersonalDetails.q3-4-5.sex.Sex"] = "Female";
            doc.Form.XFA["form1.Page1.PersonalDetails.q3-4-5.pob.PlaceBirthCountry"] = "203";
            doc.Form.XFA["form1.Page1.PersonalDetails.Citizenship.Citizenship"] = "203";
            doc.Form.XFA["form1.Page1.PersonalDetails.CurrentCOR.CurrentCOR.Row2.FromDate"] = "2016-01-01";
            // Save the updated document
            doc.Save("c:/vba/Filled_XFA.pdf");
        }
// this method used to fill form in original pdf, will preserve the user right extension 
        public static void writePDF2()
        {

            // Read the source PDF form with FileAccess of Read and Write.
            // We need ReadWrite permission because after modification,
            // we need to save the updated contents in same document/file.
            FileStream fs = new FileStream("c:/vba/imm5709.pdf", FileMode.Open, FileAccess.ReadWrite);
            // Instantiate Document instance
            Aspose.Pdf.Document pdfDocument = new Aspose.Pdf.Document(fs);
            
            // use linq to access database
            dcDataContext dc = new dcDataContext();
            tblPerson person= dc.tblPersons.SingleOrDefault(x => x.Id == 1); // use person id to get one person

            // establish the dictionary, mapping xfa node and value
            Dictionary<string, string> imm5709 = new Dictionary<string, string>();
            imm5709.Add("form1.Page1.PersonalDetails.Name.FamilyName", person.FirstName);
            imm5709.Add("form1.Page1.PersonalDetails.Name.GivenName", person.LastName);
            imm5709.Add("form1.Page1.PersonalDetails.ServiceIn.UCIClientID", person.UCI.ToString());
            imm5709.Add("form1.Page1.PersonalDetails.ApplyingFor.TRP", "1");
            imm5709.Add("form1.Page1.PersonalDetails.q3-4-5.sex.Sex", "Female");
            imm5709.Add("form1.Page1.PersonalDetails.q3-4-5.pob.PlaceBirthCountry", "203");
            imm5709.Add("form1.Page1.PersonalDetails.Citizenship.Citizenship", "203");
            imm5709.Add("form1.Page1.PersonalDetails.CurrentCOR.CurrentCOR.Row2.FromDate", "2016-01-01");

            foreach (KeyValuePair<string,string> kvp in imm5709) {
                pdfDocument.Form.XFA[kvp.Key]= kvp.Value;
            }

            // Save the updated document in save FileStream
            pdfDocument.Save();
            // Close the File Stream object
            fs.Close();

        }
    }
}

// Fill form fields in pdf file with Spire.PDF

static void Filldata()
        {
            PdfDocument doc = new PdfDocument();
            doc.LoadFromFile(@"..\..\FormField.pdf");
            PdfFormWidget formWidget = doc.Form as PdfFormWidget;
            for (int i = 0; i < formWidget.FieldsWidget.List.Count; i++)
            {
                PdfField field = formWidget.FieldsWidget.List[i] as PdfField;
                if (field is PdfTextBoxFieldWidget)
                {
                    PdfTextBoxFieldWidget textBoxField = field as PdfTextBoxFieldWidget;
                    switch (textBoxField.Name)
                    {
                        case "email":
                            textBoxField.Text = "support@e-iceblue.com";
                            break;
                        case "username":
                            textBoxField.Text = "E-iceblue";
                            break;
                        case "password":
                            textBoxField.Password = true;
                            textBoxField.Text = "e-iceblue";
                            break;
                        case "password2":
                            textBoxField.Password = true;
                            textBoxField.Text = "e-iceblue";
                            break;
                        case "company_name ":
                            textBoxField.Text = "E-iceblue";
                            break;
                        case "first_name":
                            textBoxField.Text = "James";
                            break;
                        case "last_name":
                            textBoxField.Text = "Chen";
                            break;
                        case "middle_name":
                            textBoxField.Text = "J";
                            break;
                        case "address1":
                            textBoxField.Text = "Chengdu";
                            break;
                        case "address2":
                            textBoxField.Text = "Beijing";
                            break;
                        case "city":
                            textBoxField.Text = "Shanghai";
                            break;
                        case "postal_code":
                            textBoxField.Text = "11111";
                            break;
                        case "state":
                            textBoxField.Text = "Shanghai";
                            break;
                        case "phone":
                            textBoxField.Text = "1234567901";
                            break;
                        case "mobile_phone":
                            textBoxField.Text = "123456789";
                            break;
                        case "fax":
                            textBoxField.Text = "12121212";
                            break;
                    }
                }
                if (field is PdfListBoxWidgetFieldWidget)
                {
                    PdfListBoxWidgetFieldWidget listBoxField = field as PdfListBoxWidgetFieldWidget;
                    switch (listBoxField.Name)
                    {
                        case "email_format":
                            int[] index = { 1 };
                            listBoxField.SelectedIndex = index;
                            break;
                    }
                }

                if (field is PdfComboBoxWidgetFieldWidget)
                {
                    PdfComboBoxWidgetFieldWidget comBoxField = field as PdfComboBoxWidgetFieldWidget;
                    switch (comBoxField.Name)
                    {
                        case "title":
                            int[] items = { 0 };
                            comBoxField.SelectedIndex = items;
                            break;
                    }
                }

                if (field is PdfRadioButtonListFieldWidget)
                {
                    PdfRadioButtonListFieldWidget radioBtnField = field as PdfRadioButtonListFieldWidget;
                    switch (radioBtnField.Name)
                    {
                        case "country":
                            radioBtnField.SelectedIndex = 1;
                            break;
                    }
                }

                if (field is PdfCheckBoxWidgetFieldWidget)
                {
                    PdfCheckBoxWidgetFieldWidget checkBoxField = field as PdfCheckBoxWidgetFieldWidget;
                    switch (checkBoxField.Name)
                    {
                        case "agreement_of_terms":
                            checkBoxField.Checked = true;
                            break;
                    }
                }
                if (field is PdfButtonWidgetFieldWidget)
                {
                    PdfButtonWidgetFieldWidget btnField = field as PdfButtonWidgetFieldWidget;
                    switch (btnField.Name)
                    {
                        case "submit":
                            btnField.Text = "Submit";
                            break;
                    }
                }
            }
            doc.SaveToFile(@"../../FormFieldData.pdf.pdf");
            System.Diagnostics.Process.Start(@"../../FormFieldData.pdf.pdf");